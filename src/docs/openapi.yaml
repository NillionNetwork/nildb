openapi: 3.0.0
info:
  title: Datablocks API Documentation
  version: 0.1.0

servers:
  - url: https://nil-db.sandbox.app-cluster.sandbox.nilogy.xyz
    description: Production
  - url: http://localhost:8080
    description: Local development

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    TokenResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    User:
      type: object
      required:
        - email
        - password
        - type
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        type:
          type: string
          enum: [root, admin]

    CreateUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    DeleteUserRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    Org:
      type: object
      required:
        - _id
        - name
        - prefix
        - schemas
        - queries
      properties:
        _id:
          type: string
        name:
          type: string
        prefix:
          type: string
          minLength: 5
          maxLength: 5
        schemas:
          type: object
          additionalProperties:
            type: string
        queries:
          type: object
          additionalProperties:
            type: object
            properties:
              schema:
                type: string
              pipeline:
                type: string

    CreateOrgRequest:
      type: object
      required:
        - name
        - prefix
      properties:
        name:
          type: string
        prefix:
          type: string
          minLength: 5
          maxLength: 5

    DeleteOrgRequest:
      type: object
      required:
        - orgId
      properties:
        orgId:
          type: string

    GenerateApiKeyRequest:
      type: object
      required:
        - orgId
      properties:
        orgId:
          type: string

    AddSchemaRequest:
      type: object
      required:
        - primaryKeys
        - schema
      properties:
        primaryKeys:
          type: array
          items:
            type: string
        schema:
          type: object

    DeleteSchemaRequest:
      type: object
      required:
        - schemaName
      properties:
        schemaName:
          type: string

    SchemaResponse:
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
        schema:
          type: object

    UploadDataRequest:
      type: object
      required:
        - schemaName
        - data
      properties:
        schemaName:
          type: string
        data:
          type: array
          items:
            type: object

    AddQueryRequest:
      type: object
      required:
        - schemaName
        - pipeline
      properties:
        schemaName:
          type: string
        pipeline:
          type: array
          items:
            type: object

    DeleteQueryRequest:
      type: object
      required:
        - queryName
      properties:
        queryName:
          type: string

    RunQueryRequest:
      type: object
      required:
        - queryName
      properties:
        queryName:
          type: string

    RunQueryResponse:
      type: object
      required:
        - queryName
        - data
      properties:
        queryName:
          type: string
        data:
          type: object

    FlushDataRequest:
      type: object
      required:
        - schema
      properties:
        schema:
          type: string
          format: uuid

    DeleteDataRequest:
      type: object
      required:
        - schema
        - filter
      properties:
        schema:
          type: string
          format: uuid
        filter:
          type: object
          additionalProperties: true

paths:
  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: OK

  /api/v1/auth/login:
    post:
      summary: Login endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /api/v1/users:
    post:
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
      responses:
        '200':
          description: User deleted successfully

  /api/v1/orgs:
    get:
      summary: List organizations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Org'
    post:
      summary: Create a new organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrgRequest'
      responses:
        '200':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
    delete:
      summary: Delete an organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteOrgRequest'
      responses:
        '200':
          description: Organization deleted successfully

  /api/v1/orgs/keys/generate:
    post:
      summary: Generate API key for an organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateApiKeyRequest'
      responses:
        '200':
          description: API key generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /api/v1/orgs/schemas:
    get:
      summary: List schemas
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of schemas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaResponse'
    post:
      summary: Add a new schema
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSchemaRequest'
      responses:
        '200':
          description: Schema added successfully
          content:
            application/json:
              schema:
                type: string
    delete:
      summary: Delete a schema
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSchemaRequest'
      responses:
        '200':
          description: Schema deleted successfully

  /api/v1/data/upload:
    post:
      summary: Upload data
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadDataRequest'
      responses:
        '200':
          description: Data uploaded successfully

  /api/v1/orgs/queries:
    post:
      summary: Add a new query
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddQueryRequest'
      responses:
        '200':
          description: Query added successfully
          content:
            application/json:
              schema:
                type: string
    delete:
      summary: Delete a query
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteQueryRequest'
      responses:
        '200':
          description: Query deleted successfully

  /api/v1/data/query:
    post:
      summary: Run a query
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunQueryRequest'
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunQueryResponse'

  /api/v1/data/flush:
    post:
      summary: Remove all records from a collection
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlushDataRequest'
      responses:
        '200':
          description: Number of records removed
          content:
            application/json:
              schema:
                type: number

  /api/v1/data/delete:
    post:
      summary: Delete records matching the filter from a collection
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDataRequest'
      responses:
        '200':
          description: Number of records deleted
          content:
            application/json:
              schema:
                type: number
        '400':
          description: Error when filter is empty
