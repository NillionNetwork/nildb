name: CD - Publish Docker Image to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write # Required for OIDC
  contents: read  # Required for checkout

jobs:
  publish-image-to-ecr:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-outputs.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::054037142884:role/nil-db-github"
          aws-region: "us-east-1"

      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        with:
          registry-type: public

      - uses: docker/setup-buildx-action@v3

      - name: Create build info
        run: |
          VERSION=$(cat package.json | jq -r .version)
          cat << EOF > buildinfo.json
          {
            "time": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "commit": "${{ github.sha }}",
            "version": "${VERSION}"
          }
          EOF

      - name: Build and push images
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY_ALIAS: k5d9x2g2
          ECR_REPOSITORY: nildb-api
          IMAGE_TAG_SHA: ${{ github.sha }}
        run: |
          ECR_REGISTRY_URL="${ECR_REGISTRY}/${ECR_REGISTRY_ALIAS}/${ECR_REPOSITORY}"

          # Always tag with commit sha
          TAGS="-t ${ECR_REGISTRY_URL}:${IMAGE_TAG_SHA}"
          DEPLOY_TAG="${IMAGE_TAG_SHA}"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # On manual trigger, use version from package.json
            IMAGE_TAG_VERSION=$(cat package.json | jq -r .version)
            TAGS="$TAGS -t ${ECR_REGISTRY_URL}:${IMAGE_TAG_VERSION}"
            DEPLOY_TAG="${IMAGE_TAG_VERSION}"
          else
            # If triggered by push to main, use latest tag
            TAGS="$TAGS -t ${ECR_REGISTRY_URL}:latest"
            DEPLOY_TAG="latest"
          fi

          docker build \
            --push \
            -f Dockerfile \
            $TAGS \
            .

          echo "Used tags: $TAGS" >> $GITHUB_STEP_SUMMARY
          echo "deploy_tag=${DEPLOY_TAG}" >> $GITHUB_OUTPUT

      - name: Set outputs
        id: set-outputs
        run: |
          echo "image_tag=${{ steps.build-push.outputs.deploy_tag }}" >> $GITHUB_OUTPUT

  deploy-to-ci-cluster:
    needs: publish-image-to-ecr
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    strategy:
      matrix:
        node: [ "ci-n1", "ci-n2", "ci-n3" ]
    steps:
      - name: Dispatch event to start nildb-infra/.github/workflows/ecs-${{ matrix.node }}.yaml workflow
        run: |
          # Although there are workflows for dispatch events, creates an attack vector against the PAT needed to invoke
          # the target workflow. Additionally, there is ongoing work to make this public to private workflow call
          # unnecessary. So, we'll stick with the simplified curl + PAT based approach.
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/NillionNetwork/nildb-infra/dispatches \
            -d '{
              "event_type":"trigger-on-new-nildb-image-${{ matrix.node }}",
              "client_payload":{
                "ref":"${{ github.ref }}",
                "sha":"${{ github.sha }}",
                "tag":"${{ needs.publish-image-to-ecr.outputs.image_tag }}"
              }
            }'
