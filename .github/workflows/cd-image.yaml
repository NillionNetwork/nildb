name: CD - Publish Docker Image to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write # Required for OIDC
  contents: read  # Required for checkout

jobs:
  publish-image-to-ecr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Provision ECR Repository
        uses: NillionNetwork/devops/actions/terraform/frameworks@master
        env:
          TF_VAR_name: nildb-api
        with:
          framework: ecr_repo
          deploy_env: sandbox
          deploy_roles: |
            { "sandbox": "arn:aws:iam::767397865113:role/nildb-github" }
          gha_app_id: ${{ secrets.NILLION_GITHUB_ACTIONS_APP_ID }}
          gha_app_private_key: ${{ secrets.NILLION_GITHUB_ACTIONS_APP_PRIVATE_KEY }}
          tf_secrets_master_password: ${{ secrets.SECRETS_MASTER_PASSWORD }}
          tg_command: ${{ github.ref == 'refs/heads/main' && 'apply -auto-approve' || 'plan' }}

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::767397865113:role/nildb-github"
          aws-region: "eu-west-1"

      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - uses: docker/setup-buildx-action@v3

      - name: Create build info
        run: |
          VERSION=$(cat package.json | jq -r .version)
          cat << EOF > buildinfo.json
          {
            "time": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "commit": "${{ github.sha }}",
            "version": "${VERSION}"
          }
          EOF

      - name: Build and push images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nildb-api
          IMAGE_TAG_SHA: ${{ github.sha }}
        run: |
          # Always tag with commit sha
          TAGS="-t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG_SHA}"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # On manual trigger, use version from package.json
            IMAGE_TAG_VERSION=$(cat package.json | jq -r .version)
            TAGS="$TAGS -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG_VERSION}"
          else
            # If triggered by push to main, use latest tag
            TAGS="$TAGS -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          fi
          
          docker build \
            --push \
            -f Dockerfile \
            $TAGS \
            .

          echo "Used tags: $TAGS" >> $GITHUB_STEP_SUMMARY
