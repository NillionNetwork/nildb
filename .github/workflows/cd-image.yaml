name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write # Required for OIDC
  contents: read

jobs:
  build-and-push-arch:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Just
        uses: extractions/setup-just@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::054037142884:role/nil-db-github"
          aws-region: "us-east-1"

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create build info
        run: just create-buildinfo

      - name: Build and push arch-specific image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: public.ecr.aws/k5d9x2g2/nildb-api:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  create-and-push-manifest:
    runs-on: ubuntu-latest
    needs: build-and-push-arch
    outputs:
      image_tag: ${{ steps.set-outputs.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::054037142884:role/nil-db-github"
          aws-region: "us-east-1"

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Extract package version
        id: package-version
        run: |
          VERSION=$(cat package.json | jq -r .version)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract final tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: public.ecr.aws/k5d9x2g2/nildb-api
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix=
            type=raw,value=${{ steps.package-version.outputs.version }},enable=${{ github.event_name == 'workflow_dispatch' }}
          flavor: |
            latest=false

      - name: Create and push multi-arch manifest
        run: |
          echo "${{ steps.meta.outputs.tags }}" > tags.txt
          
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Creating and pushing manifest for tag: $tag"

              docker manifest create "$tag" \
                public.ecr.aws/k5d9x2g2/nildb-api:${{ github.sha }}-amd64 \
                public.ecr.aws/k5d9x2g2/nildb-api:${{ github.sha }}-arm64
          
              docker manifest push "$tag"
            fi
          done < tags.txt

      - name: Set outputs
        id: set-outputs
        run: |
          # Extract just the tag portion (after the colon) from the first tag
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          DEPLOY_TAG="${FIRST_TAG##*:}"
          echo "image_tag=${DEPLOY_TAG}" >> $GITHUB_OUTPUT
          echo "Deploy tag: ${DEPLOY_TAG}" >> $GITHUB_STEP_SUMMARY

  deploy-to-ci-cluster:
    needs: create-and-push-manifest
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    strategy:
      matrix:
        node: [ "ci-n1", "ci-n2", "ci-n3" ]
    steps:
      - name: Dispatch event to start nildb-infra/.github/workflows/ecs-${{ matrix.node }}.yaml workflow
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/NillionNetwork/nildb-infra/dispatches \
            -d '{
              "event_type":"trigger-on-new-nildb-image-${{ matrix.node }}",
              "client_payload":{
                "ref":"${{ github.ref }}",
                "sha":"${{ github.sha }}",
                "tag":"${{ needs.create-and-push-manifest.outputs.image_tag }}"
              }
            }'
